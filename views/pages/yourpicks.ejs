<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Top Picks by Fans</title>
  <link rel="stylesheet" href="css/style.css">
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
</head>

<body>
  <h1>üèÜ Top Picks by Fans üèÜ</h1>
  <!-- Navbar which can be reused across other pages -->
  <%- include('../partials/navbar'); %>
    <script async
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAQ4mn9PMQS0DV7nVr3R95tCbhIqayTFoY&callback=initMap">
      </script>
    <div id="map"></div>
    <div id="top-picks-list" class="location-list"></div>

    <script>
      let map;

      function initMap() {
        map = new google.maps.Map(document.getElementById("map"), {
          center: { lat: 1.3521, lng: 103.8198 }, // Singapore
          zoom: 12
        });
        function getLikes(id) {
          return parseInt(localStorage.getItem(`likes_${id}`)) || 0;
        }

        function generateId(loc) {
          const name = (loc.name || "").trim().toLowerCase().replace(/\s+/g, '_');
          const town = (loc.town || "").trim().toLowerCase().replace(/\s+/g, '_');
          return `${name}_${town}`;
        }

        function formatTags(tagString) {
          if (!tagString) return "";
          return tagString.split(";").map(tag => `<span>${tag.trim()}</span>`).join(" ");
        }

        fetch("files/HKMlocations.csv")
          .then(response => {
            if (!response.ok) throw new Error("Failed to load CSV");
            return response.text();
          })
          .then(csvText => {
            Papa.parse(csvText, {
              header: true,
              skipEmptyLines: true,
              complete: (results) => {
                const data = results.data;

                // Attach like counts
                data.forEach(loc => {
                  if (!loc.lat || !loc.lng) return;
                  const id = loc.name.replace(/\s+/g, '_') + "_" + loc.town.replace(/\s+/g, '_');

                  loc.id = generateId(loc);
                  loc.likes = getLikes(loc.id);
                });

                // Sort by likes in descending order
                const sorted = data
                  .filter(loc => loc.likes > 0) // Only show liked locations
                  .sort((a, b) => b.likes - a.likes);

                const container = document.getElementById("top-picks-list");
                const bounds = new google.maps.LatLngBounds();
                sorted.forEach(loc => {
                  const lat = parseFloat(loc.lat);
                  const lng = parseFloat(loc.lng);
                  // Add marker to the map
                  const marker = new google.maps.Marker({
                    position: { lat, lng },
                    map: map,
                    title: loc.name
                  });

                  const infoWindow = new google.maps.InfoWindow({
                    content: `<strong>${loc.name}</strong><br><a href="${loc.google_maps_url}" target="_blank">Open in Google Maps</a>`
                  });

                  marker.addListener("click", () => {
                    infoWindow.open(map, marker);
                  });

                  // Extend map bounds
                  bounds.extend({ lat, lng });
                  function isOpenNow(operatingHoursStr) {
                    if (!operatingHoursStr) return false;

                    const now = new Date();
                    const currentDay = now.toLocaleDateString('en-SG', { weekday: 'short' }); // "Mon"
                    const currentTime = now.getHours() + now.getMinutes() / 60;

                    // Handle "closed on Mon to Wed" or "closed on Sun"
                    const closedMatch = operatingHoursStr.match(/closed on ([a-zA-Z,\s\-to]+)/i);
                    if (closedMatch) {
                      const closedDaysStr = closedMatch[1];
                      const closedDays = expandDays(closedDaysStr);
                      if (closedDays.includes(currentDay)) return false;
                    }

                    // Extract all time slots, split by &, and, or comma
                    const timeParts = operatingHoursStr
                      .split(/closed on/i)[0] // Remove anything after "closed on"
                      .split(/&|,| and /i)
                      .map(part => part.trim());

                    for (const part of timeParts) {
                      const match = part.match(/([0-9.]+(?:am|pm)?)\s*-\s*([0-9.]+(?:am|pm)?)/i);
                      if (match) {
                        const openTime = parseTime(match[1]);
                        const closeTime = parseTime(match[2]);
                        if (openTime <= currentTime && currentTime <= closeTime) {
                          return true;
                        }
                      }
                    }

                    return false;
                  }

                  function parseTime(timeStr) {
                    const match = timeStr.match(/([0-9]{1,2})(?:\.([0-9]{1,2}))?(am|pm)?/i);
                    if (!match) return null;

                    let hour = parseInt(match[1]);
                    const minutes = match[2] ? parseInt(match[2]) : 0;
                    let period = match[3] ? match[3].toLowerCase() : null;

                    // If no period is specified, assume 24-hour format (e.g., 13.30)
                    if (!period) {
                      return hour + minutes / 60;
                    }

                    if (period === 'pm' && hour < 12) hour += 12;
                    if (period === 'am' && hour === 12) hour = 0;

                    return hour + minutes / 60;
                  }

                  function expandDays(dayStr) {
                    const dayMap = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                    const parts = dayStr.split(/,\s*| and /).flatMap(part => {
                      if (part.includes('to')) {
                        const [start, end] = part.split('to').map(s => s.trim());
                        const startIdx = dayMap.indexOf(start);
                        const endIdx = dayMap.indexOf(end);
                        if (startIdx === -1 || endIdx === -1) return [];
                        if (startIdx <= endIdx) return dayMap.slice(startIdx, endIdx + 1);
                        return [...dayMap.slice(startIdx), ...dayMap.slice(0, endIdx + 1)];
                      } else {
                        return [part.trim()];
                      }
                    });
                    return parts;
                  }
                  const card = document.createElement("div");
                  card.className = "card";
                  card.innerHTML = `
                <h2>${loc.name}</h2>
                <p><strong>Likes:</strong> ${loc.likes}‚ù§Ô∏è </p>
                <p><strong>Rating:</strong> ${loc.rating} ‚≠ê (${loc.review_count} reviews)</p>
                <p><strong>Description:</strong> ${loc.description}</p>
                <p><strong>Taste Profile:</strong> <span class="tags">${formatTags(loc.tags)}</span></p>
                <p><strong>Location:</strong> ${loc.town}</p>
                <p><strong>Operating Hours:</strong> ${loc.operating_hours} <span class="${isOpenNow(loc.operating_hours) ? 'open' : 'closed'}">${isOpenNow(loc.operating_hours) ? 'Open Now' : 'Closed'}</span></p>
                <p><strong>Price:</strong> $${parseFloat(loc.price || 0).toFixed(2)}</p>
                <p><strong>Don't want to queue?</strong> ${loc.pre_order && loc.pre_order.trim() ? loc.pre_order : "N/A"}</p>
                <p><a href="${loc.google_maps_url}" target="_blank">üìç Save on Google Maps</a></p>
              `;
                  container.appendChild(card);
                });

                if (sorted.length === 0) {
                  container.innerHTML = "<p>No likes yet. Start liking your favourite spots on the map!</p>";
                }
              }
            });
          })
          .catch(err => console.error("Error loading top picks:", err));
      }
    </script>
    <footer class="disclaimer-footer">
      <p>
        <strong>Disclaimer:</strong><br>
        This website is created for learning purposes only. The information provided here should not be considered
        professional advice. Please note that we make no guarantees regarding the accuracy, completeness, or reliability
        of the contents of this website. Any actions you take based on the contents of this website are at your own
        risk.
        We are not liable for any losses or damages incurred from the use of this website.
      </p>
    </footer>
</body>

</html>
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <!-- Google tag (gtag.js) -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-55G6CL815X"></script>

  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-55G6CL815X');
  </script>

  <title>Best of Hokkien Mee Map</title>
  <link rel="stylesheet" href="css/style.css">
</head>

<body>
  <h1>Best of Hokkien Mee Map</h1>
  <div class="banner-container">
    <div class="rolling-banner">
      <!-- Duplicate the image sequence to ensure seamless looping -->
      <img src="/images/hkm1.jpg" alt="Hokkien Mee 1">
      <img src="/images/hkm2.jpg" alt="Hokkien Mee 2">
      <img src="/images/hkm3.jpg" alt="Hokkien Mee 3">
      <img src="/images/hkm4.jpg" alt="Hokkien Mee 4">
      <img src="/images/hkm5.jpg" alt="Hokkien Mee 5">
      <img src="/images/hkm6.jpg" alt="Hokkien Mee 6">
      <img src="/images/hkm7.jpg" alt="Hokkien Mee 7">
      <img src="/images/hkm8.jpg" alt="Hokkien Mee 8">
      <img src="/images/hkm9.jpg" alt="Hokkien Mee 9">
      <img src="/images/hkm10.jpg" alt="Hokkien Mee 10">
      <img src="/images/hkm11.jpg" alt="Hokkien Mee 11">
      <img src="/images/hkm12.jpg" alt="Hokkien Mee 12">
      <!-- Repeat for smooth scrolling -->
      <img src="/images/hkm1.jpg" alt="Hokkien Mee 1">
      <img src="/images/hkm2.jpg" alt="Hokkien Mee 2">
      <img src="/images/hkm3.jpg" alt="Hokkien Mee 3">
      <img src="/images/hkm4.jpg" alt="Hokkien Mee 4">
      <img src="/images/hkm5.jpg" alt="Hokkien Mee 5">
      <img src="/images/hkm6.jpg" alt="Hokkien Mee 6">
      <img src="/images/hkm7.jpg" alt="Hokkien Mee 7">
      <img src="/images/hkm8.jpg" alt="Hokkien Mee 8">
      <img src="/images/hkm9.jpg" alt="Hokkien Mee 9">
      <img src="/images/hkm10.jpg" alt="Hokkien Mee 10">
      <img src="/images/hkm11.jpg" alt="Hokkien Mee 11">
      <img src="/images/hkm12.jpg" alt="Hokkien Mee 12">
    </div>
  </div>
  
  <!-- Navbar which can be reused across other pages -->
  <%- include('../partials/navbar'); %>
<div class="town-filter-container">
  <label for="townFilter"><strong>Filter by Town:</strong></label>
  <select id="townFilter">
    <option value="all">All</option>
  </select>
</div>
    <main class="container">

      <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
      <script async
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAQ4mn9PMQS0DV7nVr3R95tCbhIqayTFoY&callback=initMap">
        </script>
      <script>
        function generateId(loc) {
          const name = (loc.name || "").trim().toLowerCase().replace(/\s+/g, '_');
          const town = (loc.town || "").trim().toLowerCase().replace(/\s+/g, '_');
          return `${name}_${town}`;
        }
      </script>
      <script>

        let map;

        function initMap() {
          map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: 1.3521, lng: 103.8198 }, // Singapore
            zoom: 12
          });

          fetch("files/HKMlocations.csv")
            .then(response => {
              if (!response.ok) throw new Error("Failed to load CSV");
              return response.text();
            })
            .then(csvText => {
              Papa.parse(csvText, {
                header: true,
                skipEmptyLines: true,
                complete: (results) => {
                  const data = results.data.filter(loc => loc.lat && loc.lng);
                  const listContainer = document.getElementById("location-list");
                  const townFilter = document.getElementById("townFilter");

                  // Populate town dropdown with unique towns
                  const towns = [...new Set(data.map(loc => loc.town).filter(Boolean))].sort();
                  towns.forEach(town => {
                    const option = document.createElement("option");
                    option.value = town;
                    option.textContent = town;
                    townFilter.appendChild(option);
                  });

                  // Store all markers so we can remove them during filtering
                  const markers = [];

                  function renderLocations(locations) {
                    // Sort by review count first, then by rating
                    const sorted = locations.sort((a, b) => {
                      const reviewsA = parseInt(a.review_count) || 0;
                      const reviewsB = parseInt(b.review_count) || 0;
                      const ratingA = parseFloat(a.rating) || 0;
                      const ratingB = parseFloat(b.rating) || 0;

                      if (reviewsB !== reviewsA) {
                        return reviewsB - reviewsA;
                      } else {
                        return ratingB - ratingA;
                      }
                    });

                    // Clear previous content
                    listContainer.innerHTML = "";

                    // Remove all existing markers from the map
                    markers.forEach(m => m.setMap(null));
                    markers.length = 0;

                    // Render each sorted location
                    sorted.forEach(loc => {
                      const id = generateId(loc);
                      const lat = parseFloat(loc.lat);
                      const lng = parseFloat(loc.lng);

                      const marker = new google.maps.Marker({
                        position: { lat, lng },
                        map: map,
                        title: loc.name
                      });
                      markers.push(marker);

                      const infoWindow = new google.maps.InfoWindow({
                        content: `<strong>${loc.name}</strong><br><a href="${loc.google_maps_url}" target="_blank">Open in Google Maps</a>`
                      });

                      marker.addListener("click", () => {
                        infoWindow.open(map, marker);
                      });

                      const card = document.createElement("div");
                      card.className = "card";
                      card.innerHTML = `
      <h2>${loc.name}</h2>
      <p><strong>Rating:</strong> ${loc.rating} ‚≠ê (${loc.review_count} reviews)</p>
      <p><strong>Description:</strong> ${loc.description}</p>
      <p><strong>Taste Profile:</strong> <span class="tags">${formatTags(loc.tags)}</span></p>
      <p><strong>Location:</strong> ${loc.town}</p>
      <p><strong>Operating Hours:</strong> ${loc.operating_hours}</p>
      <p><strong>Price:</strong> $${parseFloat(loc.price || 0).toFixed(2)}</p>
      <p><strong>Don't want to queue?</strong> ${loc.pre_order && loc.pre_order.trim() ? loc.pre_order : "N/A"}</p>
      <p><a href="${loc.google_maps_url}" target="_blank">üìç Save on Google Maps</a></p>
      <p><button onclick="addLike('${id}')">‚ù§Ô∏è Like (<span id="like-count-${id}">${getLikes(id)}</span>)</button></p>
    `;
                      listContainer.appendChild(card);
                    });
                  }

                  // Initial render
                  renderLocations(data);

                  // Filter on town dropdown change
                  townFilter.addEventListener("change", () => {
                    const selectedTown = townFilter.value;
                    const filtered = selectedTown === "all"
                      ? data
                      : data.filter(loc => loc.town === selectedTown);
                    renderLocations(filtered);
                  });
                }
              });
            })};
      </script>
      <script>
              function formatTags(tagString) {
                if (!tagString) return "";
                return tagString.split(";").map(tag => `<span>${tag.trim()}</span>`).join(" ");
              }
              function getLikes(id) {
                return parseInt(localStorage.getItem(`likes_${id}`)) || 0;
              }

              function addLike(id) {
                const likedKey = `liked_${id}`;
                if (localStorage.getItem(likedKey)) {
                  alert("You've already liked this location!");
                  return;
                }

                const newLikes = getLikes(id) + 1;
                localStorage.setItem(`likes_${id}`, newLikes);
                localStorage.setItem(likedKey, "true"); // Prevent multiple likes

                const likeSpan = document.getElementById(`like-count-${id}`);
                if (likeSpan) {
                  likeSpan.textContent = newLikes;
                }
              }
      </script>
      <script>
              document.addEventListener("DOMContentLoaded", () => {
                document.querySelectorAll("[id^='like-count-']").forEach(span => {
                  const id = span.id.replace("like-count-", "");
                  span.textContent = getLikes(id);
                });
              });
      </script>
      <div id="map"></div>
      <div class="location-list" id="location-list"></div>
      <footer class="disclaimer-footer">
        <p>
          <strong>Disclaimer:</strong><br>
          This website is created for learning purposes only. The information provided here should not be considered
          professional advice. Please note that we make no guarantees regarding the accuracy, completeness, or
          reliability of the contents of this website. Any actions you take based on the contents of this website are at
          your own risk. We are not liable for any losses or damages incurred from the use of this website.
        </p>
      </footer>
</body>

</html>
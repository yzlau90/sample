<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <title>Hokkien Mee Map based on your Taste Preference</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="stylesheet" href="css/style.css">
</head>

<body>

  <h1 id="page-title">Hokkien Mee based on your Taste Preference</h1>
  <!-- Navbar which can be reused across other pages -->
  <%- include('../partials/navbar'); %>
    <div id="map"></div>
    <div class="location-list" id="location-list"></div>

    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
    <script>
      let map;
      let markers = [];

      function getQueryParam(name) {
        const url = new URL(window.location.href);
        return decodeURIComponent(url.searchParams.get(name) || '').toLowerCase();
      }

      function initMap() {
        const tag = getQueryParam("tag");
        if (tag) {
          document.getElementById("page-title").textContent = `Hokkien Mee ‚Äì ${tag.charAt(0).toUpperCase() + tag.slice(1)} Style`;
        }

        map = new google.maps.Map(document.getElementById("map"), {
          center: { lat: 1.3521, lng: 103.8198 },
          zoom: 12,
        });

        fetch("files/HKMlocations.csv")
          .then(res => res.text())
          .then(csv => {
            Papa.parse(csv, {
              header: true,
              skipEmptyLines: true,
              complete: (results) => {
                const locations = results.data;

                const filtered = tag
                  ? locations.filter(loc => loc.tags && loc.tags.toLowerCase().includes(tag))
                  : locations;

                const sortedData = filtered
                  .filter(loc => loc.review_count && loc.rating)
                  .sort((a, b) => {
                    const reviewsA = parseInt(a.review_count) || 0;
                    const reviewsB = parseInt(b.review_count) || 0;
                    const ratingA = parseFloat(a.rating) || 0;
                    const ratingB = parseFloat(b.rating) || 0;

                    if (reviewsB !== reviewsA) {
                      return reviewsB - reviewsA;
                    } else {
                      return ratingB - ratingA;
                    }
                  });

                renderMarkersAndCards(sortedData);
              }
            });
          });
      }

      function renderMarkersAndCards(data) {
        const listContainer = document.getElementById("location-list");
        listContainer.innerHTML = "";
        markers.forEach(m => m.setMap(null));
        markers = [];

        data.forEach(loc => {
          if (!loc.lat || !loc.lng) return;

          const lat = parseFloat(loc.lat);
          const lng = parseFloat(loc.lng);
          const id = generateId(loc);

          const marker = new google.maps.Marker({
            position: { lat, lng },
            map,
            title: loc.name
          });
          markers.push(marker);

          const infoWindow = new google.maps.InfoWindow({
            content: `<strong>${loc.name}</strong><br><a href="${loc.google_maps_url}" target="_blank">View on Google Maps</a>`
          });

          marker.addListener("click", () => infoWindow.open(map, marker));

          const card = document.createElement("div");
          card.className = "card";
          card.innerHTML = `
        <h2>${loc.name}</h2>
        <p><strong>Rating:</strong> ${loc.rating} ‚≠ê (${loc.review_count} reviews)</p>
        <p><strong>Description:</strong> ${loc.description}</p>
        <p><strong>Taste Profile:</strong> <span class="tags">${formatTags(loc.tags)}</span></p>
        <p><strong>Location:</strong> ${loc.town}</p>
        <p><strong>Operating Hours:</strong> ${loc.operating_hours}</p>
        <p><strong>Price:</strong> $${parseFloat(loc.price || 0).toFixed(2)}</p>
        <p><strong>Don't want to queue?</strong> ${loc.pre_order && loc.pre_order.trim() ? loc.pre_order : "N/A"}</p>
        <p><a href="${loc.google_maps_url}" target="_blank">üìç Google Maps</a></p>
        <p><button onclick="addLike('${id}')">‚ù§Ô∏è Like (<span id="like-count-${id}">${getLikes(id)}</span>)</button></p>

      `;
          listContainer.appendChild(card);
        });
      }

      function bookmarkAll() {
        // Get all the location names from the DOM
        const cards = document.querySelectorAll('.card h2');
        const names = Array.from(cards).map(card => card.textContent.trim());

        if (names.length === 0) {
          alert("No locations to bookmark.");
          return;
        }

        // Create a Google Maps search query with all the names
        const query = names.map(name => encodeURIComponent(name + " Singapore")).join('%0A');

        // Open the query in a new Google Maps search
        const mapsUrl = `https://www.google.com/maps/search/${query}`;
        window.open(mapsUrl, '_blank');
      }

      function formatTags(tagString) {
        if (!tagString) return "";
        return tagString.split(";").map(tag => `<span>${tag.trim()}</span>`).join(" ");
      }
    </script>
    <script>
      function generateId(loc) {
        const name = (loc.name || "").trim().toLowerCase().replace(/\s+/g, '_');
        const town = (loc.town || "").trim().toLowerCase().replace(/\s+/g, '_');
        return `${name}_${town}`;
      }
      function getLikes(id) {
        return parseInt(localStorage.getItem(`likes_${id}`)) || 0;
      }

      function addLike(id) {
        const currentLikes = getLikes(id);
        const newLikes = currentLikes + 1;
        localStorage.setItem(`likes_${id}`, newLikes);

        const likeSpan = document.getElementById(`like-count-${id}`);
        if (likeSpan) {
          likeSpan.textContent = newLikes;
        }
      }

    </script>
    <!-- Replace with your actual Google Maps API key -->
    <script async
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAQ4mn9PMQS0DV7nVr3R95tCbhIqayTFoY&callback=initMap">
      </script>
    <footer class="disclaimer-footer">
      <p>
        <strong>Disclaimer:</strong><br>
        This website is created for learning purposes only. The information provided here should not be considered
        professional advice. Please note that we make no guarantees regarding the accuracy, completeness, or reliability
        of the contents of this website. Any actions you take based on the contents of this website are at your own
        risk.
        We are not liable for any losses or damages incurred from the use of this website.
      </p>
    </footer>
</body>

</html>